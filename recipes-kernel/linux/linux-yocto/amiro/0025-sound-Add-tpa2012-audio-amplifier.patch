From cff383814ee069ad1eca1711b5d1bbaa8648ac3e Mon Sep 17 00:00:00 2001
From: Stefan Herbrechtsmeier <stefan@herbrechtsmeier.net>
Date: Tue, 3 Jun 2014 17:13:56 +0200
Subject: [PATCH 25/35] sound: Add tpa2012 audio amplifier

Signed-off-by: Stefan Herbrechtsmeier <stefan@herbrechtsmeier.net>
---
 sound/soc/codecs/Kconfig   |   4 +
 sound/soc/codecs/Makefile  |   2 +
 sound/soc/codecs/tpa2012.c | 214 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 220 insertions(+)
 create mode 100644 sound/soc/codecs/tpa2012.c

diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 983d087a..2453c0d 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -75,6 +75,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_TLV320AIC26 if SPI_MASTER
 	select SND_SOC_TLV320AIC32X4 if I2C
 	select SND_SOC_TLV320AIC3X if I2C
+	select SND_SOC_TPA2012
 	select SND_SOC_TPA6130A2 if I2C
 	select SND_SOC_TLV320DAC33 if I2C
 	select SND_SOC_TWL4030 if TWL4030_CORE
@@ -552,5 +553,8 @@ config SND_SOC_MC13783
 config SND_SOC_ML26124
 	tristate
 
+config SND_SOC_TPA2012
+	tristate
+
 config SND_SOC_TPA6130A2
 	tristate
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index bc12676..ccc70fe 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -127,6 +127,7 @@ snd-soc-wm-hubs-objs := wm_hubs.o
 
 # Amp
 snd-soc-max9877-objs := max9877.o
+snd-soc-tpa2012-objs := tpa2012.o
 snd-soc-tpa6130a2-objs := tpa6130a2.o
 
 obj-$(CONFIG_SND_SOC_88PM860X)	+= snd-soc-88pm860x.o
@@ -257,4 +258,5 @@ obj-$(CONFIG_SND_SOC_WM_HUBS)	+= snd-soc-wm-hubs.o
 
 # Amp
 obj-$(CONFIG_SND_SOC_MAX9877)	+= snd-soc-max9877.o
+obj-$(CONFIG_SND_SOC_TPA2012)	+= snd-soc-tpa2012.o
 obj-$(CONFIG_SND_SOC_TPA6130A2)	+= snd-soc-tpa6130a2.o
diff --git a/sound/soc/codecs/tpa2012.c b/sound/soc/codecs/tpa2012.c
new file mode 100644
index 0000000..b8325c2
--- /dev/null
+++ b/sound/soc/codecs/tpa2012.c
@@ -0,0 +1,214 @@
+/*
+ * ALSA SoC Texas Instruments TPA2012 headset stereo amplifier driver
+ *
+ * Copyright (C) Bielefeld University
+ *
+ * Author: Stefan Herbrechtsmeier <stefan@herbrechtsmeier.net>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA
+ */
+
+#include <linux/bitops.h>
+#include <linux/device.h>
+#include <linux/errno.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <sound/soc.h>
+#include <sound/tlv.h>
+
+#define TPA2012_SHIFT_GAIN		0
+#define TPA2012_SHIFT_SHUTDOWN		2
+
+struct tpa2012_data {
+	struct gpio_desc	*gains[2];
+	struct gpio_desc	*shutdowns[2];
+};
+
+static int tpa2012_write(struct snd_soc_codec *codec, unsigned int reg,
+		unsigned int value)
+{
+	struct tpa2012_data *tpa2012 = snd_soc_codec_get_drvdata(codec);
+	int i;
+
+	for (i = 0; i < 2; i++)
+		gpiod_set_value_cansleep(tpa2012->gains[i],
+				!!(value & BIT(TPA2012_SHIFT_GAIN + i))); 
+
+	for (i = 0; i < 2; i++)
+		gpiod_set_value_cansleep(tpa2012->shutdowns[i],
+				!!(value & BIT(TPA2012_SHIFT_SHUTDOWN + i))); 
+
+	return 0;
+}
+
+static unsigned int tpa2012_read(struct snd_soc_codec *codec,
+		unsigned int reg)
+{
+	struct tpa2012_data *tpa2012 = snd_soc_codec_get_drvdata(codec);
+	unsigned int value = 0;
+	int i;
+
+	for (i = 0; i < 2; i++)
+		value |= (gpiod_get_value_cansleep(tpa2012->gains[i])) ?
+				BIT(TPA2012_SHIFT_GAIN + i) : 0;
+
+	for (i = 0; i < 2; i++)
+		value |= (gpiod_get_value_cansleep(tpa2012->shutdowns[i])) ?
+				BIT(TPA2012_SHIFT_SHUTDOWN + i) : 0; 
+
+	return value;
+}
+
+static const DECLARE_TLV_DB_SCALE(tpa2012_vol_tlv, 600, 600, 0);
+
+static  struct snd_kcontrol_new tpa2012_gain_control =
+	SOC_SINGLE_TLV("Speaker Playback Volume", 0,
+		TPA2012_SHIFT_GAIN, 3, 0, tpa2012_vol_tlv);
+
+static struct snd_kcontrol_new tpa2012_sd_double_control[] = {
+	SOC_DOUBLE("Speaker Playback Switch", 0,
+		TPA2012_SHIFT_SHUTDOWN, TPA2012_SHIFT_SHUTDOWN + 1,
+		1, 1),
+};
+
+static struct snd_kcontrol_new tpa2012_sd_single_control[] = {
+	SOC_SINGLE("Speaker Playback Switch", 0,
+		TPA2012_SHIFT_SHUTDOWN, 1, 1),
+};
+
+static int tpa2012_probe(struct snd_soc_codec *codec)
+{
+	struct tpa2012_data *tpa2012;
+	struct gpio_desc *gpio;
+	char *mode = "out";
+	int ret;
+	int i;
+
+	tpa2012 = devm_kzalloc(codec->dev, sizeof(*tpa2012), GFP_KERNEL);
+	if (!tpa2012)
+		return -ENOMEM;
+	snd_soc_codec_set_drvdata(codec, tpa2012);
+
+	/* Gain */
+	for (i = 0; i < 2; i++) {
+		gpio = devm_gpiod_get_index(codec->dev, "gain", i);
+		if (IS_ERR(gpio))
+			return PTR_ERR(gpio);
+		
+		ret = gpiod_direction_output(gpio, 0);
+		if (ret)
+			return ret;
+		tpa2012->gains[i] = gpio;
+	}
+
+
+	ret = snd_soc_add_codec_controls(codec, &tpa2012_gain_control, 1);
+	if (ret)
+		return ret;
+
+	/* Shutdown */
+	for (i = 0; i < 2; i++) {
+		gpio = devm_gpiod_get_index(codec->dev, "shutdown", i);
+		if (IS_ERR(gpio)) {
+			if (gpio != ERR_PTR(-ENOENT))
+				return PTR_ERR(gpio);
+
+			gpio = NULL;
+		}
+
+		if (gpio) {
+			ret = gpiod_direction_output(gpio, 1);
+			if (ret)
+				return ret;
+		}
+		
+		tpa2012->shutdowns[i] = gpio;
+	}
+
+	if (tpa2012->shutdowns[0]) {
+		if (tpa2012->shutdowns[1]) {
+			/* Shutdown left and right separate*/
+			ret = snd_soc_add_codec_controls(codec, tpa2012_sd_double_control,
+					ARRAY_SIZE(tpa2012_sd_double_control));
+			if (ret)
+				return ret;
+			mode = " separated";
+		} else {
+			/* Shutdown both together */
+			ret = snd_soc_add_codec_controls(codec, tpa2012_sd_single_control,
+					ARRAY_SIZE(tpa2012_sd_single_control));
+			mode = " combined";
+		}
+	}
+
+	dev_info(codec->dev, "2.1W stereo audio amplifier with%s shutdown\n",
+			mode);
+
+	return 0;
+}
+
+static struct snd_soc_codec_driver tpa2012_soc_codec_dev = {
+	.probe = tpa2012_probe,
+	.write = tpa2012_write,
+	.read = tpa2012_read,
+};
+
+static int tpa2012_codec_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	ret = snd_soc_register_codec(&pdev->dev, &tpa2012_soc_codec_dev,
+			NULL, 0);
+	if (ret)
+		return ret;
+
+	return ret;
+}
+
+static int tpa2012_codec_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+
+	return 0;
+}
+
+MODULE_ALIAS("platform:tpa2012");
+
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id tpa2012_of_match[] = {
+	{ .compatible = "ti,tpa2012", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, tpa2012_of_match);
+#endif
+
+static struct platform_driver tpa2012_codec_driver = {
+	.probe = tpa2012_codec_probe,
+	.remove = tpa2012_codec_remove,
+	.driver = {
+		.name = "tpa2012",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(tpa2012_of_match),
+	},
+};
+
+module_platform_driver(tpa2012_codec_driver);
+
+MODULE_AUTHOR("Stefan Herbrechtsmeier <sherbrec@cit-ec.uni-bielefeld.de>");
+MODULE_DESCRIPTION("TPA2012 Speaker amplifier driver");
+MODULE_LICENSE("GPL");
+
-- 
2.1.1

