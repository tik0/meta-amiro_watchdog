diff --git a/arch/arm/mach-omap2/Kconfig b/arch/arm/mach-omap2/Kconfig
index 8141b76..f0a6f31 100644
--- a/arch/arm/mach-omap2/Kconfig
+++ b/arch/arm/mach-omap2/Kconfig
@@ -317,6 +317,13 @@ config MACH_OMAP_3630SDP
 	default y
 	select OMAP_PACKAGE_CBP
 
+config MACH_AMIRO
+	bool "AMiRo Cognition-PU Module"
+	depends on ARCH_OMAP3
+	default y
+	select OMAP_PACKAGE_CBB
+	select SND_SOC_TPA2012
+
 config MACH_TI8168EVM
 	bool "TI8168 Evaluation Module"
 	depends on SOC_OMAPTI81XX
diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index 49f92bc..76a8320 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -236,6 +236,7 @@ obj-$(CONFIG_MACH_CRANEBOARD)		+= board-am3517crane.o
 obj-$(CONFIG_MACH_SBC3530)		+= board-omap3stalker.o
 obj-$(CONFIG_MACH_TI8168EVM)		+= board-ti8168evm.o
 obj-$(CONFIG_MACH_TI8148EVM)		+= board-ti8168evm.o
+obj-$(CONFIG_MACH_AMIRO)		+= board-amiro.o
 
 # Platform specific device init code
 
diff --git a/arch/arm/mach-omap2/board-amiro.c b/arch/arm/mach-omap2/board-amiro.c
new file mode 100644
index 0000000..47e0867
--- /dev/null
+++ b/arch/arm/mach-omap2/board-amiro.c
@@ -0,0 +1,720 @@
+/*
+ * board-amiro.c
+ *
+ * Initial code: Steve Sakoman <steve@sakoman.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/kernel.h>
+#include <linux/opp.h>
+#include <linux/platform_device.h>
+#include <linux/i2c/twl.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/spi/spi.h>
+#include <linux/irq.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/spi/flash.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mmc/host.h>
+#include <linux/can/platform/mcp251x.h>
+#include <linux/rfkill-regulator.h>
+#include <linux/wl12xx.h>
+#include <linux/skbuff.h>
+#include <linux/ti_wilink_st.h>
+
+#include <sound/tpa2012.h>
+
+#include <media/mt9v032.h>
+#include "../../../drivers/media/video/omap3isp/isp.h"
+
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+
+#include <plat/board.h>
+#include "common.h"
+#include <video/omapdss.h>
+#include <video/omap-panel-generic-dpi.h>
+#include <video/omap-panel-dvi.h>
+#include <plat/gpmc.h>
+#include <mach/hardware.h>
+#include <plat/nand.h>
+#include <plat/mcspi.h>
+#include <plat/mux.h>
+#include <plat/usb.h>
+#include <plat/omap_device.h>
+
+#include "mux.h"
+#include "hsmmc.h"
+#include "pm.h"
+#include "common-board-devices.h"
+#include "devices.h"
+
+#define AMIRO_GPIO_SYS_PD_N	66
+
+#define AMIRO_GPIO_SYS_PROG_N	78
+#define AMIRO_GPIO_SYS_DONE	79
+
+#define AMIRO_GPIO_SPI_DIR	69
+
+#define AMIRO_GPIO_SYS_UART_UP	67
+#define AMIRO_GPIO_SYS_UART_DN	68
+
+#define AMIRO_GPIO_CAN_RST_N	87
+#define AMIRO_GPIO_CAN_IRQ_N	85
+
+#define AMIRO_GPIO_LED_GREEN	144
+
+#define AMIRO_GPIO_AUDIO_GAIN0	80
+#define AMIRO_GPIO_AUDIO_GAIN1	81
+#define AMIRO_GPIO_AUDIO_SD_N	92
+
+#define AMIRO_GPIO_WLAN_EN	93
+#define AMIRO_GPIO_WLAN_IRQ	170
+#define AMIRO_GPIO_BT_EN	82
+
+#define AMIRO_GPIO_USBH_EN	168
+
+#define AMIRO_GPIO_SYS_CAM_PD_N		98
+#define AMIRO_GPIO_SYS_CAM_RST_N	63
+
+/* Overo specific gpio */
+#define OVERO_GPIO_USBH_NRESET	183
+
+/*
+ * LEDs
+ */
+static struct gpio_led gpio_leds[] = {
+	{
+		.name			= "amiro:green:status",
+		.default_trigger	= "heartbeat",
+		.gpio			= AMIRO_GPIO_LED_GREEN,
+	},
+	{
+		.name			= "amiro:red:status",
+		.default_trigger	= "default-off",
+		.gpio			= -EINVAL,	/* gets replaced */
+	},
+	{
+		.name			= "amiro:blue:status",
+		.default_trigger	= "mmc0",
+		.gpio			= -EINVAL,	/* gets replaced */
+	},
+	{
+		.name			= "overo:blue:status",
+		.default_trigger	= "mmc0",
+		.gpio			= -EINVAL,	/* gets replaced */
+		.active_low		= true,
+	},
+};
+
+static struct gpio_led_platform_data gpio_leds_pdata = {
+	.leds		= gpio_leds,
+	.num_leds	= ARRAY_SIZE(gpio_leds),
+};
+
+static struct platform_device gpio_leds_device = {
+	.name	= "leds-gpio",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &gpio_leds_pdata,
+	},
+};
+
+static int __init amiro_led_init(void)
+{
+	platform_device_register(&gpio_leds_device);
+
+	return 0;
+}
+
+/*
+ * MMC
+ */
+static struct omap2_hsmmc_info mmc[] = {
+	{
+		.mmc		= 1,
+		.caps		= MMC_CAP_4_BIT_DATA,
+		.gpio_cd	= -EINVAL,
+		.gpio_wp	= -EINVAL,
+	},
+	{
+		.name		= "wl1271",
+		.mmc		= 3,
+		.caps		= MMC_CAP_4_BIT_DATA | MMC_CAP_POWER_OFF_CARD,
+		.gpio_wp	= -EINVAL,
+		.gpio_cd	= -EINVAL,
+		.ocr_mask	= MMC_VDD_165_195,
+		.nonremovable	= true,
+	},
+	{}	/* Terminator */
+};
+
+/*
+ * TWL4030
+ */
+static int amiro_twl_gpio_setup(struct device *dev,
+		unsigned gpio, unsigned ngpio)
+{
+	gpio_leds[1].gpio = gpio + 6;
+	gpio_leds[2].gpio = gpio + 7;
+
+	/* TWL4030_GPIO_MAX == ledA, PMU_STAT (out, active low LED) */
+	gpio_leds[3].gpio = gpio + TWL4030_GPIO_MAX + 1;
+
+	return 0;
+}
+
+static struct twl4030_gpio_platform_data amiro_gpio_pdata = {
+	.gpio_base	= OMAP_MAX_GPIO_LINES,
+	.irq_base	= TWL4030_GPIO_IRQ_BASE,
+	.irq_end	= TWL4030_GPIO_IRQ_END,
+	.use_leds	= true,
+	.setup		= amiro_twl_gpio_setup,
+};
+
+static struct regulator_consumer_supply amiro_vmmc1_supply[] = {
+	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.0"),
+};
+
+static struct regulator_init_data amiro_vmmc1 = {
+	.constraints = {
+		.min_uV			= 1850000,
+		.max_uV			= 3150000,
+		.valid_modes_mask	= REGULATOR_MODE_NORMAL
+					| REGULATOR_MODE_STANDBY,
+		.valid_ops_mask		= REGULATOR_CHANGE_VOLTAGE
+					| REGULATOR_CHANGE_MODE
+					| REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(amiro_vmmc1_supply),
+	.consumer_supplies	= amiro_vmmc1_supply,
+};
+
+static struct twl4030_platform_data amiro_twl_pdata = {
+	.gpio		= &amiro_gpio_pdata,
+	.vmmc1		= &amiro_vmmc1,
+};
+
+/*
+ * I2C
+ */
+static struct i2c_board_info __initdata amiro_i2c3_info[] = {
+       {
+               I2C_BOARD_INFO("eeprom", 0x51),
+       },
+};
+
+static int __init amiro_i2c_init(void)
+{
+	omap3_pmic_get_config(&amiro_twl_pdata,
+			TWL_COMMON_PDATA_USB | TWL_COMMON_PDATA_AUDIO,
+			TWL_COMMON_REGULATOR_VPLL2);
+
+	omap3_pmic_init("tps65950", &amiro_twl_pdata);
+	omap_register_i2c_bus(3, 100, amiro_i2c3_info,
+			ARRAY_SIZE(amiro_i2c3_info));
+
+	return 0;
+}
+
+/*
+ * FPGA
+ */
+static struct gpio amiro_fpga_gpios[] __initdata = {
+	{AMIRO_GPIO_SPI_DIR, GPIOF_IN | GPIOF_OPEN_DRAIN, "spi dir"},
+	{AMIRO_GPIO_SYS_PROG_N, GPIOF_IN | GPIOF_OPEN_DRAIN, "fpga prog_n"},
+	{AMIRO_GPIO_SYS_DONE, GPIOF_IN | GPIOF_OPEN_DRAIN, "fpga done"},
+};
+
+static int __init amiro_fpga_init(void)
+{
+	int ret, i;
+
+	ret = gpio_request_array(amiro_fpga_gpios, ARRAY_SIZE(amiro_fpga_gpios));
+	if (ret) {
+		pr_err("Unable to request FPGA GPIOs (%d)\n", ret);
+		return ret;
+	}
+
+	gpio_export(AMIRO_GPIO_SPI_DIR, 1);
+	gpio_export(AMIRO_GPIO_SYS_PROG_N, 1);
+	gpio_export(AMIRO_GPIO_SYS_DONE, 1);
+
+	if (!gpio_get_value(AMIRO_GPIO_SPI_DIR)) {
+		printk(KERN_INFO "System SPI slave mode selected\n");
+		return 0;
+	}
+
+	//omap_mux_init_signal("mcspi1_cs2", OMAP_PIN_INPUT_PULLUP);
+
+	/* 
+	 * Emulate Open Drain Signals
+	 * LOW:  gpio_direction_output(gpio, 0)
+	 * HIGH: gpio_direction_input(gpio)
+	 */
+	gpio_set_value(AMIRO_GPIO_SYS_PROG_N, 0);
+	udelay(10);
+
+	if (gpio_get_value(AMIRO_GPIO_SYS_DONE)) {
+		printk(KERN_INFO "No FPGA module detected\n");
+		return 0;
+	}
+
+	gpio_set_value(AMIRO_GPIO_SPI_DIR, 0);
+	udelay(10);
+	gpio_set_value(AMIRO_GPIO_SYS_PROG_N, 1);
+	msleep(100);
+
+	for (i = 0; !gpio_get_value(AMIRO_GPIO_SYS_DONE) &&  i <= 600; i++)
+		msleep(10); 
+
+	if (!gpio_get_value(AMIRO_GPIO_SYS_DONE)) {
+		pr_err("Unable to configure FPGA from SPI Flash\n");
+		gpio_set_value(AMIRO_GPIO_SPI_DIR, 1);
+		gpio_set_value(AMIRO_GPIO_SYS_PROG_N, 0);
+		udelay(10);
+
+		return 0;
+	}
+
+	gpio_set_value(AMIRO_GPIO_SPI_DIR, 1);
+
+	printk(KERN_INFO "FPGA configuration loaded from SPI Flash (%d ms)\n", i * 10);
+
+	return 0;
+}
+
+/*
+ * CAN
+ */
+static struct mcp251x_platform_data amiro_mcp2515_pdata = {
+	.oscillator_frequency	= 24E6,
+};
+
+/*
+ * SPI Flash
+ */
+static struct flash_platform_data amiro_spi_flash_pdata = {
+	.name = "m25p80",
+	.type = "at25df641",
+};
+
+/*
+ * SPI
+ */
+static struct spi_board_info amiro_spi_board_info[] __initdata = {
+	[0] = {
+		.modalias	= "mcp2515",
+		.platform_data	= &amiro_mcp2515_pdata,
+		.max_speed_hz	= 10E6,
+		.bus_num	= 3,
+		.chip_select	= 0,
+		.mode		= SPI_MODE_0,
+	},
+	{
+		.modalias	= "spartan6",
+		.max_speed_hz	= 75E6,
+		.bus_num	= 1,
+		.chip_select	= 2,
+		.mode		= SPI_MODE_0,
+	},
+	{
+		.modalias	= "m25p80",
+		.platform_data	= &amiro_spi_flash_pdata,
+		.max_speed_hz	= 45E6,
+		.bus_num	= 1,
+		.chip_select	= 1,
+		.mode		= SPI_MODE_0,
+	},
+	{
+		.modalias	= "power-li",
+		.max_speed_hz	= 75E6,
+		.bus_num	= 1,
+		.chip_select	= 0,
+		.mode		= SPI_MODE_0,
+	},
+};
+
+static struct gpio amiro_can_gpios[] __initdata = {
+	{AMIRO_GPIO_CAN_RST_N, GPIOF_OUT_INIT_HIGH, "can reset"},
+	{AMIRO_GPIO_CAN_IRQ_N, GPIOF_IN, "can irq"},
+};
+
+static int __init amiro_spi_init(void)
+{
+	int ret;
+
+	/* CAN */
+	ret = gpio_request_array(amiro_can_gpios, ARRAY_SIZE(amiro_can_gpios));
+	if (ret) {
+		pr_err("Unable to request CAN GPIOs (%d)\n", ret);
+		return ret;
+	}
+
+	gpio_set_value(AMIRO_GPIO_CAN_RST_N, 0);
+	udelay(10);
+	gpio_set_value(AMIRO_GPIO_CAN_RST_N, 1);
+
+	amiro_spi_board_info[0].irq = gpio_to_irq(AMIRO_GPIO_CAN_IRQ_N);
+	irq_set_irq_type(amiro_spi_board_info[0].irq, IRQ_TYPE_EDGE_FALLING);
+
+	spi_register_board_info(amiro_spi_board_info,
+			ARRAY_SIZE(amiro_spi_board_info));
+
+	return 0;
+}
+
+/*
+ * USB High Speed
+ */
+static const struct usbhs_omap_board_data usbhs_bdata __initconst = {
+	.port_mode[0]		= OMAP_USBHS_PORT_MODE_UNUSED,
+	.port_mode[1]		= OMAP_EHCI_PORT_MODE_PHY,
+	.port_mode[2]		= OMAP_USBHS_PORT_MODE_UNUSED,
+	.phy_reset		= true,
+	.reset_gpio_port[0]	= -EINVAL,
+	.reset_gpio_port[1]	= OVERO_GPIO_USBH_NRESET,
+	.reset_gpio_port[2]	= -EINVAL
+};
+
+static int __init amiro_usbh_init(void)
+{
+	int ret;
+
+	usbhs_init(&usbhs_bdata);
+
+	ret = gpio_request_one(AMIRO_GPIO_USBH_EN, GPIOF_OUT_INIT_HIGH,
+			       "USBH enable");
+	if (ret) {
+		pr_err("Unable to request USBH GPIOs (%d)\n", ret);
+		return ret;
+	}
+
+	gpio_export(AMIRO_GPIO_USBH_EN, 0);
+
+	return 0;
+}
+
+/*
+ * MUX
+ */
+static struct omap_board_mux board_mux[] __initdata = {
+	/* WLAN IRQ - GPIO 170 */
+	OMAP3_MUX(HDQ_SIO, OMAP_MUX_MODE4 | OMAP_PIN_INPUT),
+
+	/* WLAN POWER ENABLE - GPIO 150 */
+	OMAP3_MUX(DSS_DATA23, OMAP_MUX_MODE4 | OMAP_PIN_OUTPUT),
+
+	/* MMC2 SDIO pin muxes for WL12xx */
+	OMAP3_MUX(SDMMC2_CLK, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP),
+	OMAP3_MUX(SDMMC2_CMD, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP),
+	OMAP3_MUX(SDMMC2_DAT0, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP),
+	OMAP3_MUX(SDMMC2_DAT1, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP),
+	OMAP3_MUX(SDMMC2_DAT2, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP),
+	OMAP3_MUX(SDMMC2_DAT3, OMAP_MUX_MODE0 | OMAP_PIN_INPUT_PULLUP),
+
+	{ .reg_offset = OMAP_MUX_TERMINATOR },
+};
+
+/*
+ * Audio
+ */
+static struct tpa2012_platform_data amiro_tpa2012_pdata = {
+	.gain0		= AMIRO_GPIO_AUDIO_GAIN0,
+	.gain1		= AMIRO_GPIO_AUDIO_GAIN1,
+	.shutdown_left	= AMIRO_GPIO_AUDIO_SD_N,
+	.shutdown_right	= -EINVAL,
+};
+
+static struct platform_device amiro_tpa2012_device = {
+	.name		= "tpa2012",
+	.id		= 0,
+	.dev = {
+		.platform_data = &amiro_tpa2012_pdata,
+	},
+};
+
+static int __init amiro_audio_init(void)
+{
+	platform_device_register(&amiro_tpa2012_device);
+
+	return 0;
+}
+
+/*
+ * Regulator
+ */
+static struct regulator_consumer_supply amiro_vmmc3_supply[] = {
+	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.2"),
+};
+
+static struct regulator_init_data amiro_vmmc3 = {
+	.constraints = {
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(amiro_vmmc3_supply),
+	.consumer_supplies = amiro_vmmc3_supply,
+};
+
+static struct fixed_voltage_config amiro_vwlan = {
+	.supply_name		= "vwl1271",
+	.microvolts		= 1800000, /* 1.8V */
+	.gpio			= AMIRO_GPIO_WLAN_EN,
+	.startup_delay		= 70000, /* 70msec */
+	.enable_high		= 1,
+	.enabled_at_boot	= 0,
+	.init_data		= &amiro_vmmc3,
+};
+
+static struct platform_device amiro_vwlan_regulator = {
+	.name		= "reg-fixed-voltage",
+	.id		= 1,
+	.dev = {
+		.platform_data = &amiro_vwlan,
+	},
+};
+
+/*
+ * WL1271
+ */
+struct wl12xx_platform_data amiro_wlan_pdata  __initdata = {
+	.board_ref_clock = WL12XX_REFCLOCK_38, /* 38.4 MHz */
+};
+
+static struct platform_device *amiro_wlan_devices[] __initdata = {
+	&amiro_vwlan_regulator,
+};
+
+static int __init amiro_wlan_init(void)
+{
+	int ret;
+
+	ret = gpio_request_one(AMIRO_GPIO_WLAN_IRQ, GPIOF_IN, "wl1271 irq");
+	if (ret) {
+		pr_err("Unable to request WLAN GPIOs (%d)\n", ret);
+		goto fail;
+	}
+
+	amiro_wlan_pdata.irq = gpio_to_irq(AMIRO_GPIO_WLAN_IRQ);
+
+	ret = wl12xx_set_platform_data(&amiro_wlan_pdata);
+	if (ret) {
+		pr_err("Unable to set wl1271 platform data: %d\n", ret);
+		goto fail_irq;
+	}
+
+	platform_add_devices(amiro_wlan_devices,
+			     ARRAY_SIZE(amiro_wlan_devices));
+
+
+	return 0;
+
+fail_irq:
+	gpio_free(AMIRO_GPIO_WLAN_IRQ);
+	
+fail:
+	return ret;
+}
+
+#if 0
+static struct ti_st_plat_data amiro_tist_pdata = {
+	.nshutdown_gpio = AMIRO_GPIO_BT_EN,
+	.dev_name = "/dev/ttyO0",
+	.flow_cntrl = 1,
+	.baud_rate = 3000000,
+};
+
+static struct platform_device amiro_kim_device = {
+	.name		= "kim",
+	.id		= -1,
+	.dev = {
+		.platform_data = &amiro_tist_pdata,
+	},
+};
+
+static struct platform_device amiro_btwilink_device = {
+	.name = "btwilink",
+	.id = -1,
+};
+
+static struct platform_device *amiro_bt_devices[] __initdata = {
+	&amiro_kim_device,
+	&amiro_btwilink_device,
+};
+#endif
+
+static int __init amiro_bluetooth_init(void)
+{
+#if 1
+	int ret;
+
+	ret = gpio_request_one(AMIRO_GPIO_BT_EN, GPIOF_OUT_INIT_LOW,
+			       "wl1271 bt_en");
+	if (ret) {
+		pr_err("Unable to request Bluetooth GPIOs (%d)\n", ret);
+		return ret;
+	}
+
+	gpio_set_value(AMIRO_GPIO_BT_EN, 1);
+	msleep(10);
+	gpio_set_value(AMIRO_GPIO_BT_EN, 0);
+	udelay(100);
+	gpio_set_value(AMIRO_GPIO_BT_EN, 1);
+
+	gpio_export(AMIRO_GPIO_BT_EN, 0);
+#else
+	platform_add_devices(amiro_bt_devices,
+			     ARRAY_SIZE(amiro_bt_devices));
+#endif
+
+	return 0;
+}
+
+
+/*
+ * Camera
+ */
+static void mt9v032_set_clock(struct v4l2_subdev *subdev, unsigned int rate)
+{
+	struct isp_device *isp = v4l2_dev_to_isp_device(subdev->v4l2_dev);
+
+	printk("Setting xclk to %d hz\n", rate);
+	isp->platform_cb.set_xclk(isp, rate, ISP_XCLK_A);
+}
+
+static struct mt9v032_platform_data mt9v032_pdata = {
+	.clk_pol	= 0,
+	.set_clock	= mt9v032_set_clock,
+};
+
+static struct i2c_board_info mt9v032_i2c_device = {
+	I2C_BOARD_INFO("mt9v032", 0x5c),
+	.platform_data = &mt9v032_pdata,
+};
+
+static struct isp_subdev_i2c_board_info mt9v032_subdevs[] = {
+	{
+		.board_info = &mt9v032_i2c_device,
+		.i2c_adapter_id = 3,
+	},
+	{ NULL, 0, },
+};
+
+static struct isp_v4l2_subdevs_group amiro_camera_subdevs[] = {
+	{
+		.subdevs = mt9v032_subdevs,
+		.interface = ISP_INTERFACE_PARALLEL,
+		.bus = {
+				.parallel = {
+					.data_lane_shift = 0,
+					.clk_pol = 0,
+					.bridge = ISPCTRL_PAR_BRIDGE_DISABLE,
+				}
+		},
+	},
+	{ NULL, 0, },
+};
+
+static struct isp_platform_data amiro_isp_pdata = {
+	.subdevs = amiro_camera_subdevs,
+};
+
+static struct gpio amiro_cam_gpios[] __initdata = {
+	{AMIRO_GPIO_SYS_CAM_PD_N, GPIOF_OUT_INIT_LOW, "cam pd_n"},
+	{AMIRO_GPIO_SYS_CAM_RST_N, GPIOF_OUT_INIT_LOW, "cam rst_n"},
+};
+
+static int __init amiro_camera_init(void)
+{
+	int ret;
+
+	ret = gpio_request_array(amiro_cam_gpios, ARRAY_SIZE(amiro_cam_gpios));
+	if (ret) {
+		pr_err("Unable to request camera GPIOs (%d)\n", ret);
+		return ret;
+	}
+
+       return omap3_init_camera(&amiro_isp_pdata);
+}
+
+/*
+ * OPP
+ */
+static int __init amiro_opp_init(void)
+{
+	int ret = 0;
+
+	/* Initialize the omap3 opp table */
+	ret = omap3_opp_init();
+	if (ret) {
+		pr_err("Unable to init opp default\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+/*
+ * AMiRo
+ */
+static void __init amiro_init(void)
+{
+	omap3_mux_init(board_mux, OMAP_PACKAGE_CBB);
+
+	amiro_wlan_init();
+	omap_hsmmc_init(mmc);
+	amiro_i2c_init();
+	amiro_led_init();
+	omap_serial_init();
+	omap_sdrc_init(NULL, NULL);
+	omap_nand_flash_init(0, NULL, 0);
+	usb_musb_init(NULL);
+	amiro_usbh_init();
+	amiro_audio_init();
+	amiro_fpga_init();
+	amiro_spi_init();
+	amiro_bluetooth_init();
+	amiro_camera_init();
+	amiro_opp_init();
+
+	/* Ensure SDRC pins are mux'd for self-refresh */
+	omap_mux_init_signal("sdrc_cke0", OMAP_PIN_OUTPUT);
+	omap_mux_init_signal("sdrc_cke1", OMAP_PIN_OUTPUT);
+}
+
+MACHINE_START(AMIRO, "AMiRo")
+	.atag_offset	= 0x100,
+	.reserve	= omap_reserve,
+	.map_io		= omap3_map_io,
+	.init_early	= omap35xx_init_early,
+	.init_irq	= omap3_init_irq,
+	.handle_irq	= omap3_intc_handle_irq,
+	.init_machine	= amiro_init,
+	.timer		= &omap3_timer,
+	.restart	= omap_prcm_restart,
+MACHINE_END
diff --git a/arch/arm/tools/mach-types b/arch/arm/tools/mach-types
index f9c9f33..589c414 100644
--- a/arch/arm/tools/mach-types
+++ b/arch/arm/tools/mach-types
@@ -1169,3 +1169,4 @@ elite_ulk		MACH_ELITE_ULK		ELITE_ULK		3888
 pov2			MACH_POV2		POV2			3889
 ipod_touch_2g		MACH_IPOD_TOUCH_2G	IPOD_TOUCH_2G		3890
 da850_pqab		MACH_DA850_PQAB		DA850_PQAB		3891
+amiro			MACH_AMIRO		AMIRO			4302
diff --git a/include/sound/tpa2012.h b/include/sound/tpa2012.h
new file mode 100644
index 0000000..7084e3b
--- /dev/null
+++ b/include/sound/tpa2012.h
@@ -0,0 +1,22 @@
+/*
+ * linux/sound/tpa2012.h -- Platform data for TPA2012
+ *
+ * Copyright 2012
+ * TODO: add author
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __LINUX_SND_TPA2012_H
+#define __LINUX_SND_TPA2012_H
+
+struct tpa2012_platform_data {
+	int gain0;
+	int gain1;
+	int shutdown_left;
+	int shutdown_right;
+};
+
+#endif
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 59d8efa..77a5427 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -55,6 +55,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_TLV320AIC32X4 if I2C
 	select SND_SOC_TLV320AIC3X if I2C
 	select SND_SOC_TPA6130A2 if I2C
+	select SND_SOC_TPA2012
 	select SND_SOC_TLV320DAC33 if I2C
 	select SND_SOC_TWL4030 if TWL4030_CORE
 	select SND_SOC_TWL6040 if TWL6040_CORE
@@ -437,3 +438,6 @@ config SND_SOC_MAX9877
 
 config SND_SOC_TPA6130A2
 	tristate
+
+config SND_SOC_TPA2012
+	tristate
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 6662eb0..fede450 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -101,6 +101,7 @@ snd-soc-wm-hubs-objs := wm_hubs.o
 # Amp
 snd-soc-max9877-objs := max9877.o
 snd-soc-tpa6130a2-objs := tpa6130a2.o
+snd-soc-tpa2012-objs := tpa2012.o
 
 obj-$(CONFIG_SND_SOC_88PM860X)	+= snd-soc-88pm860x.o
 obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o
@@ -205,3 +206,4 @@ obj-$(CONFIG_SND_SOC_WM_HUBS)	+= snd-soc-wm-hubs.o
 # Amp
 obj-$(CONFIG_SND_SOC_MAX9877)	+= snd-soc-max9877.o
 obj-$(CONFIG_SND_SOC_TPA6130A2)	+= snd-soc-tpa6130a2.o
+obj-$(CONFIG_SND_SOC_TPA2012)	+= snd-soc-tpa2012.o
\ No newline at end of file
diff --git a/sound/soc/codecs/tpa2012.c b/sound/soc/codecs/tpa2012.c
new file mode 100644
index 0000000..c1a16cf
--- /dev/null
+++ b/sound/soc/codecs/tpa2012.c
@@ -0,0 +1,258 @@
+/*
+ * ALSA SoC Texas Instruments TPA6130A2 headset stereo amplifier driver
+ *
+ * Copyright (C) Nokia Corporation
+ *
+ * Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA
+ */
+
+#include <linux/bitops.h>
+#include <linux/device.h>
+#include <linux/errno.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <sound/soc.h>
+#include <sound/tlv.h>
+#include <sound/tpa2012.h>
+
+#define TPA2012_SHIFT_GAIN0		0
+#define TPA2012_SHIFT_GAIN1		1
+#define TPA2012_SHIFT_SHUTDOWN_LEFT	2
+#define TPA2012_SHIFT_SHUTDOWN_RIGHT	3
+
+static const uint8_t tpa2012_default_regs[] = {
+	0x00,
+};
+
+static int tpa2012_gpio_request(int gpio, char *name)
+{
+	int ret = 0;
+
+	if (gpio_is_valid(gpio))
+		ret = gpio_request_one(gpio, GPIOF_OUT_INIT_LOW, name);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request GPIO '%s': %d\n",
+			name, ret);
+
+	return ret;
+}
+
+static void tpa2012_gpio_free(int gpio)
+{
+	if (gpio_is_valid(gpio))
+		gpio_free(gpio);
+}
+
+static void tpa2012_gpio_set_value(int gpio, unsigned int value)
+{
+	if (gpio_is_valid(gpio))
+		gpio_set_value(gpio, value);
+}
+
+static int tpa2012_gpio_get_value(int gpio)
+{
+	if (gpio_is_valid(gpio))
+		return gpio_get_value(gpio);
+
+	return 0;
+}
+
+static int tpa2012_write(struct snd_soc_codec *codec, unsigned int reg,
+		unsigned int value)
+{
+	struct tpa2012_platform_data *pdata = dev_get_platdata(codec->dev);
+
+	tpa2012_gpio_set_value(pdata->gain0,
+			!!(value & BIT(TPA2012_SHIFT_GAIN0))); 
+	tpa2012_gpio_set_value(pdata->gain1,
+			!!(value & BIT(TPA2012_SHIFT_GAIN1))); 
+	tpa2012_gpio_set_value(pdata->shutdown_left,
+			!!(value & BIT(TPA2012_SHIFT_SHUTDOWN_LEFT))); 
+	tpa2012_gpio_set_value(pdata->shutdown_right,
+			!!(value & BIT(TPA2012_SHIFT_SHUTDOWN_RIGHT))); 
+
+	return 0;
+}
+
+static unsigned int tpa2012_read(struct snd_soc_codec *codec,
+		unsigned int reg)
+{
+	struct tpa2012_platform_data *pdata = dev_get_platdata(codec->dev);
+	unsigned int value;
+
+	value = (tpa2012_gpio_get_value(pdata->gain0)) ?
+			BIT(TPA2012_SHIFT_GAIN0) : 0; 
+	value |= (tpa2012_gpio_get_value(pdata->gain1)) ?
+			BIT(TPA2012_SHIFT_GAIN1) : 0; 
+	value |= (tpa2012_gpio_get_value(pdata->shutdown_left)) ?
+			BIT(TPA2012_SHIFT_SHUTDOWN_LEFT) : 0; 
+	value |= (tpa2012_gpio_get_value(pdata->shutdown_right)) ?
+			BIT(TPA2012_SHIFT_SHUTDOWN_RIGHT) : 0; 
+
+	return value;
+}
+
+static const DECLARE_TLV_DB_SCALE(tpa2012_vol_tlv, 600, 600, 0);
+
+static  struct snd_kcontrol_new tpa2012_gain_control =
+	SOC_SINGLE_TLV("Speaker Playback Volume", 0,
+		TPA2012_SHIFT_GAIN0, 3, 0, tpa2012_vol_tlv);
+
+static struct snd_kcontrol_new tpa2012_sd_double_control[] = {
+	SOC_DOUBLE("Speaker Playback Switch", 0,
+		TPA2012_SHIFT_SHUTDOWN_LEFT, TPA2012_SHIFT_SHUTDOWN_RIGHT,
+		1, 0),
+};
+
+static struct snd_kcontrol_new tpa2012_sd_single_control[] = {
+	SOC_SINGLE("Speaker Playback Switch", 0,
+		TPA2012_SHIFT_SHUTDOWN_LEFT, 1, 0),
+};
+
+static int tpa2012_probe(struct snd_soc_codec *codec)
+{
+	struct tpa2012_platform_data *pdata = dev_get_platdata(codec->dev);
+	char *mode = "out";
+	int ret;
+
+	/* Gain */
+	if (gpio_is_valid(pdata->gain0) &&
+			gpio_is_valid(pdata->gain1)) {
+		ret = tpa2012_gpio_request(pdata->gain0, "tpa2012 gain0");
+		if (ret)
+			goto err;
+
+		ret = tpa2012_gpio_request(pdata->gain1, "tpa2012 gain1");
+		if (ret)
+			goto err_gpio_free_gain0;
+
+		ret = snd_soc_add_codec_controls(codec, &tpa2012_gain_control, 1);
+		if (ret)
+			goto err_gpio_free_gain1;;
+	}
+
+	/* Shutdown left and right separate*/
+	if (gpio_is_valid(pdata->shutdown_left) &&
+			gpio_is_valid(pdata->shutdown_right)) {
+		ret = tpa2012_gpio_request(pdata->shutdown_left,
+				"tpa2012 shutdown left");
+		if (ret)
+			goto err_gpio_free_gain1;
+
+		ret = tpa2012_gpio_request(pdata->shutdown_right,
+				"tpa2012 shutdown right");
+		if (ret)
+			goto err_gpio_free_shutdown_left;
+  
+		ret = snd_soc_add_codec_controls(codec, tpa2012_sd_double_control,
+				ARRAY_SIZE(tpa2012_sd_double_control));
+		if (ret)
+			goto err_gpio_free_shutdown_right;
+		mode = " separated";
+	/* Shutdown both together */
+	} else if (gpio_is_valid(pdata->shutdown_left)) {
+		ret = tpa2012_gpio_request(pdata->shutdown_left,
+				"tpa2012 shutdown");
+		if (ret)
+			goto err_gpio_free_gain1;
+
+		ret = snd_soc_add_codec_controls(codec, tpa2012_sd_single_control,
+				ARRAY_SIZE(tpa2012_sd_single_control));
+		if (ret)
+			goto err_gpio_free_shutdown_left;
+		mode = " combined";
+	}
+
+	dev_info(&codec->dev, "2.1W stereo audio amplifier with%s shutdown\n",
+			mode);
+
+	return 0;
+
+err_gpio_free_shutdown_right:
+	tpa2012_gpio_free(pdata->gain0);
+err_gpio_free_shutdown_left:
+	tpa2012_gpio_free(pdata->gain1);
+err_gpio_free_gain1:
+	tpa2012_gpio_free(pdata->shutdown_left);
+err_gpio_free_gain0:
+	tpa2012_gpio_free(pdata->shutdown_right);
+err:
+	return ret;
+}
+
+static int tpa2012_remove(struct snd_soc_codec *codec)
+{
+	struct tpa2012_platform_data *pdata = dev_get_platdata(codec->dev);
+
+	tpa2012_gpio_free(pdata->gain0);
+	tpa2012_gpio_free(pdata->gain1);
+	tpa2012_gpio_free(pdata->shutdown_left);
+	tpa2012_gpio_free(pdata->shutdown_right);
+
+	return 0;
+}
+
+static struct snd_soc_codec_driver tpa2012_soc_codec_dev = {
+	.probe = tpa2012_probe,
+	.remove =  tpa2012_remove,
+	.write = tpa2012_write,
+	.read = tpa2012_read,
+};
+
+static int __devinit tpa2012_codec_probe(struct platform_device *pdev)
+{
+	struct tpa2012_platform_data *pdata = pdev->dev.platform_data;
+	int ret;
+
+	if (!pdata) {
+		dev_err(&pdev->dev, "platform_data is missing\n");
+		return -EINVAL;
+	}
+
+	ret = snd_soc_register_codec(&pdev->dev, &tpa2012_soc_codec_dev,
+			NULL, 0);
+	if (ret)
+		return ret;
+
+	return ret;
+}
+
+static int __devexit tpa2012_codec_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+
+	return 0;
+}
+
+MODULE_ALIAS("platform:tpa2012");
+
+static struct platform_driver tpa2012_codec_driver = {
+	.probe = tpa2012_codec_probe,
+	.remove = __devexit_p(tpa2012_codec_remove),
+	.driver = {
+		.name = "tpa2012",
+		.owner = THIS_MODULE,
+	},
+};
+
+module_platform_driver(tpa2012_codec_driver);
+
+MODULE_AUTHOR("Stefan Herbrechtsmeier <sherbrec@cit-ec.uni-bielefeld.de>");
+MODULE_DESCRIPTION("TPA2012 Speaker amplifier driver");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/omap/Kconfig b/sound/soc/omap/Kconfig
index deafbfa..9cc7a06 100644
--- a/sound/soc/omap/Kconfig
+++ b/sound/soc/omap/Kconfig
@@ -61,13 +61,13 @@ config SND_OMAP_SOC_OSK5912
 	  Say Y if you want to add support for SoC audio on osk5912.
 
 config SND_OMAP_SOC_OVERO
-	tristate "SoC Audio support for Gumstix Overo and CompuLab CM-T35"
-	depends on TWL4030_CORE && SND_OMAP_SOC && (MACH_OVERO || MACH_CM_T35)
+	tristate "SoC Audio support for Gumstix Overo, CompuLab CM-T35 and AMiRo"
+	depends on TWL4030_CORE && SND_OMAP_SOC && (MACH_OVERO || MACH_CM_T35 || MACH_AMIRO)
 	select SND_OMAP_SOC_MCBSP
 	select SND_SOC_TWL4030
 	help
 	  Say Y if you want to add support for SoC audio on the
-	  Gumstix Overo or CompuLab CM-T35
+	  Gumstix Overo, CompuLab CM-T35 or AMiRo
 
 config SND_OMAP_SOC_OMAP3EVM
 	tristate "SoC Audio support for OMAP3EVM board"
diff --git a/sound/soc/omap/overo.c b/sound/soc/omap/overo.c
index 6ac3e0c..390aebf 100644
--- a/sound/soc/omap/overo.c
+++ b/sound/soc/omap/overo.c
@@ -69,12 +69,19 @@ static struct snd_soc_dai_link overo_dai = {
 	.ops = &overo_ops,
 };
 
+static struct snd_soc_aux_dev overo_aux_dev = {
+	.name = "TPA2012",
+	.codec_name = "tpa2012.0",
+};
+
 /* Audio machine driver */
 static struct snd_soc_card snd_soc_card_overo = {
 	.name = "overo",
 	.owner = THIS_MODULE,
 	.dai_link = &overo_dai,
 	.num_links = 1,
+	.aux_dev = &overo_aux_dev,
+	.num_aux_devs = 1,
 };
 
 static struct platform_device *overo_snd_device;
@@ -83,7 +90,8 @@ static int __init overo_soc_init(void)
 {
 	int ret;
 
-	if (!(machine_is_overo() || machine_is_cm_t35())) {
+	if (!(machine_is_overo() || machine_is_cm_t35()
+			|| machine_is_amiro())) {
 		pr_debug("Incomatible machine!\n");
 		return -ENODEV;
 	}
